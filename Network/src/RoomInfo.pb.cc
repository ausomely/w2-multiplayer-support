// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoomInfo.proto

#include "RoomInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_RoomInfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RoomInformation_RoomInfo_2eproto;
namespace RoomInfo {
class RoomInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomInformation> _instance;
} _RoomInformation_default_instance_;
class RoomInfoPackageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomInfoPackage> _instance;
} _RoomInfoPackage_default_instance_;
}  // namespace RoomInfo
static void InitDefaultsRoomInformation_RoomInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoomInfo::_RoomInformation_default_instance_;
    new (ptr) ::RoomInfo::RoomInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoomInfo::RoomInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoomInformation_RoomInfo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoomInformation_RoomInfo_2eproto}, {}};

static void InitDefaultsRoomInfoPackage_RoomInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoomInfo::_RoomInfoPackage_default_instance_;
    new (ptr) ::RoomInfo::RoomInfoPackage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoomInfo::RoomInfoPackage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoomInfoPackage_RoomInfo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoomInfoPackage_RoomInfo_2eproto}, {
      &scc_info_RoomInformation_RoomInfo_2eproto.base,}};

void InitDefaults_RoomInfo_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_RoomInformation_RoomInfo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoomInfoPackage_RoomInfo_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_RoomInfo_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_RoomInfo_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_RoomInfo_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_RoomInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInformation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInformation, host_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInformation, map_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInformation, capacity_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInformation, size_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInformation, active_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInformation, colors_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInformation, players_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInformation, types_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInformation, ready_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInfoPackage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInfoPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoomInfo::RoomInfoPackage, roominfo_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::RoomInfo::RoomInformation)},
  { 23, 29, sizeof(::RoomInfo::RoomInfoPackage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::RoomInfo::_RoomInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::RoomInfo::_RoomInfoPackage_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_RoomInfo_2eproto = {
  {}, AddDescriptors_RoomInfo_2eproto, "RoomInfo.proto", schemas,
  file_default_instances, TableStruct_RoomInfo_2eproto::offsets,
  file_level_metadata_RoomInfo_2eproto, 2, file_level_enum_descriptors_RoomInfo_2eproto, file_level_service_descriptors_RoomInfo_2eproto,
};

const char descriptor_table_protodef_RoomInfo_2eproto[] =
  "\n\016RoomInfo.proto\022\010RoomInfo\"\233\001\n\017RoomInfor"
  "mation\022\014\n\004host\030\001 \002(\t\022\013\n\003map\030\002 \002(\t\022\020\n\010cap"
  "acity\030\003 \002(\005\022\014\n\004size\030\004 \002(\005\022\016\n\006active\030\005 \002("
  "\010\022\016\n\006colors\030\006 \003(\005\022\017\n\007players\030\007 \003(\t\022\r\n\005ty"
  "pes\030\010 \003(\005\022\r\n\005ready\030\t \003(\010\">\n\017RoomInfoPack"
  "age\022+\n\010roominfo\030\001 \003(\0132\031.RoomInfo.RoomInf"
  "ormation"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_RoomInfo_2eproto = {
  false, InitDefaults_RoomInfo_2eproto, 
  descriptor_table_protodef_RoomInfo_2eproto,
  "RoomInfo.proto", &assign_descriptors_table_RoomInfo_2eproto, 248,
};

void AddDescriptors_RoomInfo_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_RoomInfo_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RoomInfo_2eproto = []() { AddDescriptors_RoomInfo_2eproto(); return true; }();
namespace RoomInfo {

// ===================================================================

void RoomInformation::InitAsDefaultInstance() {
}
class RoomInformation::HasBitSetters {
 public:
  static void set_has_host(RoomInformation* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_map(RoomInformation* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_capacity(RoomInformation* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_size(RoomInformation* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_active(RoomInformation* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomInformation::kHostFieldNumber;
const int RoomInformation::kMapFieldNumber;
const int RoomInformation::kCapacityFieldNumber;
const int RoomInformation::kSizeFieldNumber;
const int RoomInformation::kActiveFieldNumber;
const int RoomInformation::kColorsFieldNumber;
const int RoomInformation::kPlayersFieldNumber;
const int RoomInformation::kTypesFieldNumber;
const int RoomInformation::kReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomInformation::RoomInformation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomInfo.RoomInformation)
}
RoomInformation::RoomInformation(const RoomInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      colors_(from.colors_),
      players_(from.players_),
      types_(from.types_),
      ready_(from.ready_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  ::memcpy(&capacity_, &from.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:RoomInfo.RoomInformation)
}

void RoomInformation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RoomInformation_RoomInfo_2eproto.base);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(active_));
}

RoomInformation::~RoomInformation() {
  // @@protoc_insertion_point(destructor:RoomInfo.RoomInformation)
  SharedDtor();
}

void RoomInformation::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoomInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomInformation& RoomInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RoomInformation_RoomInfo_2eproto.base);
  return *internal_default_instance();
}


void RoomInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomInfo.RoomInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  colors_.Clear();
  players_.Clear();
  types_.Clear();
  ready_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      map_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&capacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&capacity_)) + sizeof(active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoomInformation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RoomInformation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string host = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("RoomInfo.RoomInformation.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required string map = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("RoomInfo.RoomInformation.map");
        object = msg->mutable_map();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required int32 capacity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_capacity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool active = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_active(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 colors = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 48) {
          do {
            msg->add_colors(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_colors();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated string players = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("RoomInfo.RoomInformation.players");
          object = msg->add_players();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // repeated int32 types = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 64) {
          do {
            msg->add_types(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_types();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated bool ready = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 72) {
          do {
            msg->add_ready(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 72 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedBoolParser;
        object = msg->mutable_ready();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoomInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomInfo.RoomInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RoomInfo.RoomInformation.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), static_cast<int>(this->map().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RoomInfo.RoomInformation.map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 capacity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_capacity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool active = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_active(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 colors = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_colors())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_colors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string players = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_players()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->players(this->players_size() - 1).data(),
            static_cast<int>(this->players(this->players_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RoomInfo.RoomInformation.players");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 types = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_types())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool ready = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 72u, input, this->mutable_ready())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_ready())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomInfo.RoomInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomInfo.RoomInformation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoomInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomInfo.RoomInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RoomInfo.RoomInformation.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // required string map = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RoomInfo.RoomInformation.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->map(), output);
  }

  // required int32 capacity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->capacity(), output);
  }

  // required int32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // required bool active = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->active(), output);
  }

  // repeated int32 colors = 6;
  for (int i = 0, n = this->colors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->colors(i), output);
  }

  // repeated string players = 7;
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->players(i).data(), static_cast<int>(this->players(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RoomInfo.RoomInformation.players");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->players(i), output);
  }

  // repeated int32 types = 8;
  for (int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->types(i), output);
  }

  // repeated bool ready = 9;
  for (int i = 0, n = this->ready_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      9, this->ready(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoomInfo.RoomInformation)
}

::google::protobuf::uint8* RoomInformation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomInfo.RoomInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RoomInfo.RoomInformation.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required string map = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RoomInfo.RoomInformation.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map(), target);
  }

  // required int32 capacity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->capacity(), target);
  }

  // required int32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // required bool active = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->active(), target);
  }

  // repeated int32 colors = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->colors_, target);

  // repeated string players = 7;
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->players(i).data(), static_cast<int>(this->players(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RoomInfo.RoomInformation.players");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->players(i), target);
  }

  // repeated int32 types = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(8, this->types_, target);

  // repeated bool ready = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(9, this->ready_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomInfo.RoomInformation)
  return target;
}

size_t RoomInformation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoomInfo.RoomInformation)
  size_t total_size = 0;

  if (has_host()) {
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  if (has_map()) {
    // required string map = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map());
  }

  if (has_capacity()) {
    // required int32 capacity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->capacity());
  }

  if (has_size()) {
    // required int32 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  if (has_active()) {
    // required bool active = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RoomInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomInfo.RoomInformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());

    // required string map = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map());

    // required int32 capacity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->capacity());

    // required int32 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());

    // required bool active = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 colors = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->colors_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->colors_size());
    total_size += data_size;
  }

  // repeated string players = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->players_size());
  for (int i = 0, n = this->players_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->players(i));
  }

  // repeated int32 types = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->types_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->types_size());
    total_size += data_size;
  }

  // repeated bool ready = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->ready_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ready_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomInfo.RoomInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInformation* source =
      ::google::protobuf::DynamicCastToGenerated<RoomInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomInfo.RoomInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomInfo.RoomInformation)
    MergeFrom(*source);
  }
}

void RoomInformation::MergeFrom(const RoomInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomInfo.RoomInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  colors_.MergeFrom(from.colors_);
  players_.MergeFrom(from.players_);
  types_.MergeFrom(from.types_);
  ready_.MergeFrom(from.ready_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000004u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoomInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomInfo.RoomInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInformation::CopyFrom(const RoomInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomInfo.RoomInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void RoomInformation::Swap(RoomInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomInformation::InternalSwap(RoomInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  colors_.InternalSwap(&other->colors_);
  players_.InternalSwap(CastToBase(&other->players_));
  types_.InternalSwap(&other->types_);
  ready_.InternalSwap(&other->ready_);
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_.Swap(&other->map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(capacity_, other->capacity_);
  swap(size_, other->size_);
  swap(active_, other->active_);
}

::google::protobuf::Metadata RoomInformation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_RoomInfo_2eproto);
  return ::file_level_metadata_RoomInfo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RoomInfoPackage::InitAsDefaultInstance() {
}
class RoomInfoPackage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomInfoPackage::kRoominfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomInfoPackage::RoomInfoPackage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomInfo.RoomInfoPackage)
}
RoomInfoPackage::RoomInfoPackage(const RoomInfoPackage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      roominfo_(from.roominfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RoomInfo.RoomInfoPackage)
}

void RoomInfoPackage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RoomInfoPackage_RoomInfo_2eproto.base);
}

RoomInfoPackage::~RoomInfoPackage() {
  // @@protoc_insertion_point(destructor:RoomInfo.RoomInfoPackage)
  SharedDtor();
}

void RoomInfoPackage::SharedDtor() {
}

void RoomInfoPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomInfoPackage& RoomInfoPackage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RoomInfoPackage_RoomInfo_2eproto.base);
  return *internal_default_instance();
}


void RoomInfoPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomInfo.RoomInfoPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roominfo_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoomInfoPackage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RoomInfoPackage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .RoomInfo.RoomInformation roominfo = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::RoomInfo::RoomInformation::_InternalParse;
          object = msg->add_roominfo();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoomInfoPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomInfo.RoomInfoPackage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RoomInfo.RoomInformation roominfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_roominfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomInfo.RoomInfoPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomInfo.RoomInfoPackage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoomInfoPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomInfo.RoomInfoPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RoomInfo.RoomInformation roominfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roominfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->roominfo(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoomInfo.RoomInfoPackage)
}

::google::protobuf::uint8* RoomInfoPackage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomInfo.RoomInfoPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RoomInfo.RoomInformation roominfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roominfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->roominfo(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomInfo.RoomInfoPackage)
  return target;
}

size_t RoomInfoPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomInfo.RoomInfoPackage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoomInfo.RoomInformation roominfo = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->roominfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roominfo(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomInfoPackage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomInfo.RoomInfoPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInfoPackage* source =
      ::google::protobuf::DynamicCastToGenerated<RoomInfoPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomInfo.RoomInfoPackage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomInfo.RoomInfoPackage)
    MergeFrom(*source);
  }
}

void RoomInfoPackage::MergeFrom(const RoomInfoPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomInfo.RoomInfoPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roominfo_.MergeFrom(from.roominfo_);
}

void RoomInfoPackage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomInfo.RoomInfoPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfoPackage::CopyFrom(const RoomInfoPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomInfo.RoomInfoPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfoPackage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->roominfo())) return false;
  return true;
}

void RoomInfoPackage::Swap(RoomInfoPackage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomInfoPackage::InternalSwap(RoomInfoPackage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&roominfo_)->InternalSwap(CastToBase(&other->roominfo_));
}

::google::protobuf::Metadata RoomInfoPackage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_RoomInfo_2eproto);
  return ::file_level_metadata_RoomInfo_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RoomInfo
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::RoomInfo::RoomInformation* Arena::CreateMaybeMessage< ::RoomInfo::RoomInformation >(Arena* arena) {
  return Arena::CreateInternal< ::RoomInfo::RoomInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::RoomInfo::RoomInfoPackage* Arena::CreateMaybeMessage< ::RoomInfo::RoomInfoPackage >(Arena* arena) {
  return Arena::CreateInternal< ::RoomInfo::RoomInfoPackage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
