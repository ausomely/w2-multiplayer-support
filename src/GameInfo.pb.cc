// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameInfo.proto

#include "GameInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_GameInfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCommandRequest_CPixelPosition_GameInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameInfo_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerCommandRequest_GameInfo_2eproto;
namespace GameInfo {
class PlayerCommandRequest_CPixelPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerCommandRequest_CPixelPosition> _instance;
} _PlayerCommandRequest_CPixelPosition_default_instance_;
class PlayerCommandRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerCommandRequest> _instance;
} _PlayerCommandRequest_default_instance_;
class PlayerCommandPackageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerCommandPackage> _instance;
} _PlayerCommandPackage_default_instance_;
}  // namespace GameInfo
static void InitDefaultsPlayerCommandRequest_CPixelPosition_GameInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameInfo::_PlayerCommandRequest_CPixelPosition_default_instance_;
    new (ptr) ::GameInfo::PlayerCommandRequest_CPixelPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameInfo::PlayerCommandRequest_CPixelPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCommandRequest_CPixelPosition_GameInfo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerCommandRequest_CPixelPosition_GameInfo_2eproto}, {}};

static void InitDefaultsPlayerCommandRequest_GameInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameInfo::_PlayerCommandRequest_default_instance_;
    new (ptr) ::GameInfo::PlayerCommandRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameInfo::PlayerCommandRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerCommandRequest_GameInfo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerCommandRequest_GameInfo_2eproto}, {
      &scc_info_PlayerCommandRequest_CPixelPosition_GameInfo_2eproto.base,}};

static void InitDefaultsPlayerCommandPackage_GameInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameInfo::_PlayerCommandPackage_default_instance_;
    new (ptr) ::GameInfo::PlayerCommandPackage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameInfo::PlayerCommandPackage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerCommandPackage_GameInfo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerCommandPackage_GameInfo_2eproto}, {
      &scc_info_PlayerCommandRequest_GameInfo_2eproto.base,}};

void InitDefaults_GameInfo_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerCommandRequest_CPixelPosition_GameInfo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerCommandRequest_GameInfo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerCommandPackage_GameInfo_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_GameInfo_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_GameInfo_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_GameInfo_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_GameInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest_CPixelPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest_CPixelPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest_CPixelPosition, dx_),
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest_CPixelPosition, dy_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest, daction_),
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest, dtargetnumber_),
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest, dtargettype_),
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest, dactors_),
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest, dtargetlocation_),
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandRequest, playernum_),
  1,
  2,
  3,
  ~0u,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandPackage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameInfo::PlayerCommandPackage, dplayercommand_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::GameInfo::PlayerCommandRequest_CPixelPosition)},
  { 9, 20, sizeof(::GameInfo::PlayerCommandRequest)},
  { 26, 32, sizeof(::GameInfo::PlayerCommandPackage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameInfo::_PlayerCommandRequest_CPixelPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameInfo::_PlayerCommandRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameInfo::_PlayerCommandPackage_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_GameInfo_2eproto = {
  {}, AddDescriptors_GameInfo_2eproto, "GameInfo.proto", schemas,
  file_default_instances, TableStruct_GameInfo_2eproto::offsets,
  file_level_metadata_GameInfo_2eproto, 3, file_level_enum_descriptors_GameInfo_2eproto, file_level_service_descriptors_GameInfo_2eproto,
};

const char descriptor_table_protodef_GameInfo_2eproto[] =
  "\n\016GameInfo.proto\022\010GameInfo\"\351\001\n\024PlayerCom"
  "mandRequest\022\017\n\007DAction\030\001 \002(\005\022\025\n\rDTargetN"
  "umber\030\002 \002(\005\022\023\n\013DTargetType\030\003 \002(\005\022\017\n\007DAct"
  "ors\030\004 \003(\005\022F\n\017DTargetLocation\030\005 \002(\0132-.Gam"
  "eInfo.PlayerCommandRequest.CPixelPositio"
  "n\022\021\n\tPlayerNum\030\006 \002(\005\032(\n\016CPixelPosition\022\n"
  "\n\002DX\030\001 \002(\005\022\n\n\002DY\030\002 \002(\005\"N\n\024PlayerCommandP"
  "ackage\0226\n\016DPlayerCommand\030\001 \003(\0132\036.GameInf"
  "o.PlayerCommandRequest"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_GameInfo_2eproto = {
  false, InitDefaults_GameInfo_2eproto, 
  descriptor_table_protodef_GameInfo_2eproto,
  "GameInfo.proto", &assign_descriptors_table_GameInfo_2eproto, 342,
};

void AddDescriptors_GameInfo_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_GameInfo_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameInfo_2eproto = []() { AddDescriptors_GameInfo_2eproto(); return true; }();
namespace GameInfo {

// ===================================================================

void PlayerCommandRequest_CPixelPosition::InitAsDefaultInstance() {
}
class PlayerCommandRequest_CPixelPosition::HasBitSetters {
 public:
  static void set_has_dx(PlayerCommandRequest_CPixelPosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_dy(PlayerCommandRequest_CPixelPosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerCommandRequest_CPixelPosition::kDXFieldNumber;
const int PlayerCommandRequest_CPixelPosition::kDYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCommandRequest_CPixelPosition::PlayerCommandRequest_CPixelPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameInfo.PlayerCommandRequest.CPixelPosition)
}
PlayerCommandRequest_CPixelPosition::PlayerCommandRequest_CPixelPosition(const PlayerCommandRequest_CPixelPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dx_, &from.dx_,
    static_cast<size_t>(reinterpret_cast<char*>(&dy_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(dy_));
  // @@protoc_insertion_point(copy_constructor:GameInfo.PlayerCommandRequest.CPixelPosition)
}

void PlayerCommandRequest_CPixelPosition::SharedCtor() {
  ::memset(&dx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dy_) -
      reinterpret_cast<char*>(&dx_)) + sizeof(dy_));
}

PlayerCommandRequest_CPixelPosition::~PlayerCommandRequest_CPixelPosition() {
  // @@protoc_insertion_point(destructor:GameInfo.PlayerCommandRequest.CPixelPosition)
  SharedDtor();
}

void PlayerCommandRequest_CPixelPosition::SharedDtor() {
}

void PlayerCommandRequest_CPixelPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCommandRequest_CPixelPosition& PlayerCommandRequest_CPixelPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerCommandRequest_CPixelPosition_GameInfo_2eproto.base);
  return *internal_default_instance();
}


void PlayerCommandRequest_CPixelPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:GameInfo.PlayerCommandRequest.CPixelPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dy_) -
        reinterpret_cast<char*>(&dx_)) + sizeof(dy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerCommandRequest_CPixelPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerCommandRequest_CPixelPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 DX = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 DY = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_dy(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerCommandRequest_CPixelPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameInfo.PlayerCommandRequest.CPixelPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DX = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 DY = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_dy(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameInfo.PlayerCommandRequest.CPixelPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameInfo.PlayerCommandRequest.CPixelPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerCommandRequest_CPixelPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameInfo.PlayerCommandRequest.CPixelPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 DX = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dx(), output);
  }

  // required int32 DY = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameInfo.PlayerCommandRequest.CPixelPosition)
}

::google::protobuf::uint8* PlayerCommandRequest_CPixelPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameInfo.PlayerCommandRequest.CPixelPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 DX = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dx(), target);
  }

  // required int32 DY = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameInfo.PlayerCommandRequest.CPixelPosition)
  return target;
}

size_t PlayerCommandRequest_CPixelPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameInfo.PlayerCommandRequest.CPixelPosition)
  size_t total_size = 0;

  if (has_dx()) {
    // required int32 DX = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dx());
  }

  if (has_dy()) {
    // required int32 DY = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dy());
  }

  return total_size;
}
size_t PlayerCommandRequest_CPixelPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameInfo.PlayerCommandRequest.CPixelPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 DX = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dx());

    // required int32 DY = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dy());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCommandRequest_CPixelPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameInfo.PlayerCommandRequest.CPixelPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCommandRequest_CPixelPosition* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerCommandRequest_CPixelPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameInfo.PlayerCommandRequest.CPixelPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameInfo.PlayerCommandRequest.CPixelPosition)
    MergeFrom(*source);
  }
}

void PlayerCommandRequest_CPixelPosition::MergeFrom(const PlayerCommandRequest_CPixelPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameInfo.PlayerCommandRequest.CPixelPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dx_ = from.dx_;
    }
    if (cached_has_bits & 0x00000002u) {
      dy_ = from.dy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerCommandRequest_CPixelPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameInfo.PlayerCommandRequest.CPixelPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCommandRequest_CPixelPosition::CopyFrom(const PlayerCommandRequest_CPixelPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameInfo.PlayerCommandRequest.CPixelPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCommandRequest_CPixelPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PlayerCommandRequest_CPixelPosition::Swap(PlayerCommandRequest_CPixelPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCommandRequest_CPixelPosition::InternalSwap(PlayerCommandRequest_CPixelPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dx_, other->dx_);
  swap(dy_, other->dy_);
}

::google::protobuf::Metadata PlayerCommandRequest_CPixelPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameInfo_2eproto);
  return ::file_level_metadata_GameInfo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerCommandRequest::InitAsDefaultInstance() {
  ::GameInfo::_PlayerCommandRequest_default_instance_._instance.get_mutable()->dtargetlocation_ = const_cast< ::GameInfo::PlayerCommandRequest_CPixelPosition*>(
      ::GameInfo::PlayerCommandRequest_CPixelPosition::internal_default_instance());
}
class PlayerCommandRequest::HasBitSetters {
 public:
  static void set_has_daction(PlayerCommandRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_dtargetnumber(PlayerCommandRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_dtargettype(PlayerCommandRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::GameInfo::PlayerCommandRequest_CPixelPosition& dtargetlocation(const PlayerCommandRequest* msg);
  static void set_has_dtargetlocation(PlayerCommandRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playernum(PlayerCommandRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::GameInfo::PlayerCommandRequest_CPixelPosition&
PlayerCommandRequest::HasBitSetters::dtargetlocation(const PlayerCommandRequest* msg) {
  return *msg->dtargetlocation_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerCommandRequest::kDActionFieldNumber;
const int PlayerCommandRequest::kDTargetNumberFieldNumber;
const int PlayerCommandRequest::kDTargetTypeFieldNumber;
const int PlayerCommandRequest::kDActorsFieldNumber;
const int PlayerCommandRequest::kDTargetLocationFieldNumber;
const int PlayerCommandRequest::kPlayerNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCommandRequest::PlayerCommandRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameInfo.PlayerCommandRequest)
}
PlayerCommandRequest::PlayerCommandRequest(const PlayerCommandRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dactors_(from.dactors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dtargetlocation()) {
    dtargetlocation_ = new ::GameInfo::PlayerCommandRequest_CPixelPosition(*from.dtargetlocation_);
  } else {
    dtargetlocation_ = nullptr;
  }
  ::memcpy(&daction_, &from.daction_,
    static_cast<size_t>(reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&daction_)) + sizeof(playernum_));
  // @@protoc_insertion_point(copy_constructor:GameInfo.PlayerCommandRequest)
}

void PlayerCommandRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerCommandRequest_GameInfo_2eproto.base);
  ::memset(&dtargetlocation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playernum_) -
      reinterpret_cast<char*>(&dtargetlocation_)) + sizeof(playernum_));
}

PlayerCommandRequest::~PlayerCommandRequest() {
  // @@protoc_insertion_point(destructor:GameInfo.PlayerCommandRequest)
  SharedDtor();
}

void PlayerCommandRequest::SharedDtor() {
  if (this != internal_default_instance()) delete dtargetlocation_;
}

void PlayerCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCommandRequest& PlayerCommandRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerCommandRequest_GameInfo_2eproto.base);
  return *internal_default_instance();
}


void PlayerCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameInfo.PlayerCommandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dactors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dtargetlocation_ != nullptr);
    dtargetlocation_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&daction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playernum_) -
        reinterpret_cast<char*>(&daction_)) + sizeof(playernum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerCommandRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerCommandRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 DAction = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_daction(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 DTargetNumber = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_dtargetnumber(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 DTargetType = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_dtargettype(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 DActors = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_dactors(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_dactors();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // required .GameInfo.PlayerCommandRequest.CPixelPosition DTargetLocation = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameInfo::PlayerCommandRequest_CPixelPosition::_InternalParse;
        object = msg->mutable_dtargetlocation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required int32 PlayerNum = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_playernum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameInfo.PlayerCommandRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DAction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_daction(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 DTargetNumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_dtargetnumber(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtargetnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 DTargetType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_dtargettype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtargettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 DActors = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_dactors())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dactors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GameInfo.PlayerCommandRequest.CPixelPosition DTargetLocation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dtargetlocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 PlayerNum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_playernum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameInfo.PlayerCommandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameInfo.PlayerCommandRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameInfo.PlayerCommandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 DAction = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->daction(), output);
  }

  // required int32 DTargetNumber = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dtargetnumber(), output);
  }

  // required int32 DTargetType = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dtargettype(), output);
  }

  // repeated int32 DActors = 4;
  for (int i = 0, n = this->dactors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->dactors(i), output);
  }

  // required .GameInfo.PlayerCommandRequest.CPixelPosition DTargetLocation = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::dtargetlocation(this), output);
  }

  // required int32 PlayerNum = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playernum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameInfo.PlayerCommandRequest)
}

::google::protobuf::uint8* PlayerCommandRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameInfo.PlayerCommandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 DAction = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->daction(), target);
  }

  // required int32 DTargetNumber = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dtargetnumber(), target);
  }

  // required int32 DTargetType = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dtargettype(), target);
  }

  // repeated int32 DActors = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->dactors_, target);

  // required .GameInfo.PlayerCommandRequest.CPixelPosition DTargetLocation = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::dtargetlocation(this), target);
  }

  // required int32 PlayerNum = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playernum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameInfo.PlayerCommandRequest)
  return target;
}

size_t PlayerCommandRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameInfo.PlayerCommandRequest)
  size_t total_size = 0;

  if (has_dtargetlocation()) {
    // required .GameInfo.PlayerCommandRequest.CPixelPosition DTargetLocation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dtargetlocation_);
  }

  if (has_daction()) {
    // required int32 DAction = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->daction());
  }

  if (has_dtargetnumber()) {
    // required int32 DTargetNumber = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dtargetnumber());
  }

  if (has_dtargettype()) {
    // required int32 DTargetType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dtargettype());
  }

  if (has_playernum()) {
    // required int32 PlayerNum = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playernum());
  }

  return total_size;
}
size_t PlayerCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameInfo.PlayerCommandRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .GameInfo.PlayerCommandRequest.CPixelPosition DTargetLocation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dtargetlocation_);

    // required int32 DAction = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->daction());

    // required int32 DTargetNumber = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dtargetnumber());

    // required int32 DTargetType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dtargettype());

    // required int32 PlayerNum = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playernum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 DActors = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dactors_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dactors_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameInfo.PlayerCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCommandRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerCommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameInfo.PlayerCommandRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameInfo.PlayerCommandRequest)
    MergeFrom(*source);
  }
}

void PlayerCommandRequest::MergeFrom(const PlayerCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameInfo.PlayerCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dactors_.MergeFrom(from.dactors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dtargetlocation()->::GameInfo::PlayerCommandRequest_CPixelPosition::MergeFrom(from.dtargetlocation());
    }
    if (cached_has_bits & 0x00000002u) {
      daction_ = from.daction_;
    }
    if (cached_has_bits & 0x00000004u) {
      dtargetnumber_ = from.dtargetnumber_;
    }
    if (cached_has_bits & 0x00000008u) {
      dtargettype_ = from.dtargettype_;
    }
    if (cached_has_bits & 0x00000010u) {
      playernum_ = from.playernum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerCommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameInfo.PlayerCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCommandRequest::CopyFrom(const PlayerCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameInfo.PlayerCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCommandRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_dtargetlocation()) {
    if (!this->dtargetlocation_->IsInitialized()) return false;
  }
  return true;
}

void PlayerCommandRequest::Swap(PlayerCommandRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCommandRequest::InternalSwap(PlayerCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dactors_.InternalSwap(&other->dactors_);
  swap(dtargetlocation_, other->dtargetlocation_);
  swap(daction_, other->daction_);
  swap(dtargetnumber_, other->dtargetnumber_);
  swap(dtargettype_, other->dtargettype_);
  swap(playernum_, other->playernum_);
}

::google::protobuf::Metadata PlayerCommandRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameInfo_2eproto);
  return ::file_level_metadata_GameInfo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerCommandPackage::InitAsDefaultInstance() {
}
class PlayerCommandPackage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerCommandPackage::kDPlayerCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCommandPackage::PlayerCommandPackage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameInfo.PlayerCommandPackage)
}
PlayerCommandPackage::PlayerCommandPackage(const PlayerCommandPackage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dplayercommand_(from.dplayercommand_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameInfo.PlayerCommandPackage)
}

void PlayerCommandPackage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerCommandPackage_GameInfo_2eproto.base);
}

PlayerCommandPackage::~PlayerCommandPackage() {
  // @@protoc_insertion_point(destructor:GameInfo.PlayerCommandPackage)
  SharedDtor();
}

void PlayerCommandPackage::SharedDtor() {
}

void PlayerCommandPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCommandPackage& PlayerCommandPackage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerCommandPackage_GameInfo_2eproto.base);
  return *internal_default_instance();
}


void PlayerCommandPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameInfo.PlayerCommandPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dplayercommand_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerCommandPackage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerCommandPackage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .GameInfo.PlayerCommandRequest DPlayerCommand = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameInfo::PlayerCommandRequest::_InternalParse;
          object = msg->add_dplayercommand();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerCommandPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameInfo.PlayerCommandPackage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameInfo.PlayerCommandRequest DPlayerCommand = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dplayercommand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameInfo.PlayerCommandPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameInfo.PlayerCommandPackage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerCommandPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameInfo.PlayerCommandPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameInfo.PlayerCommandRequest DPlayerCommand = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dplayercommand_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->dplayercommand(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameInfo.PlayerCommandPackage)
}

::google::protobuf::uint8* PlayerCommandPackage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameInfo.PlayerCommandPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameInfo.PlayerCommandRequest DPlayerCommand = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dplayercommand_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dplayercommand(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameInfo.PlayerCommandPackage)
  return target;
}

size_t PlayerCommandPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameInfo.PlayerCommandPackage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameInfo.PlayerCommandRequest DPlayerCommand = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dplayercommand_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dplayercommand(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCommandPackage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameInfo.PlayerCommandPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCommandPackage* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerCommandPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameInfo.PlayerCommandPackage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameInfo.PlayerCommandPackage)
    MergeFrom(*source);
  }
}

void PlayerCommandPackage::MergeFrom(const PlayerCommandPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameInfo.PlayerCommandPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dplayercommand_.MergeFrom(from.dplayercommand_);
}

void PlayerCommandPackage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameInfo.PlayerCommandPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCommandPackage::CopyFrom(const PlayerCommandPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameInfo.PlayerCommandPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCommandPackage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->dplayercommand())) return false;
  return true;
}

void PlayerCommandPackage::Swap(PlayerCommandPackage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCommandPackage::InternalSwap(PlayerCommandPackage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&dplayercommand_)->InternalSwap(CastToBase(&other->dplayercommand_));
}

::google::protobuf::Metadata PlayerCommandPackage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameInfo_2eproto);
  return ::file_level_metadata_GameInfo_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameInfo
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::GameInfo::PlayerCommandRequest_CPixelPosition* Arena::CreateMaybeMessage< ::GameInfo::PlayerCommandRequest_CPixelPosition >(Arena* arena) {
  return Arena::CreateInternal< ::GameInfo::PlayerCommandRequest_CPixelPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::GameInfo::PlayerCommandRequest* Arena::CreateMaybeMessage< ::GameInfo::PlayerCommandRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameInfo::PlayerCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameInfo::PlayerCommandPackage* Arena::CreateMaybeMessage< ::GameInfo::PlayerCommandPackage >(Arena* arena) {
  return Arena::CreateInternal< ::GameInfo::PlayerCommandPackage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
